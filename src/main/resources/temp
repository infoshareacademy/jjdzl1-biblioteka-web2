package com.infoshare.servlets;

import com.infoshare.domain.User;
import com.infoshare.repository.UsersRepositoryDao;
import com.infoshare.utils.Hasher;
import com.infoshare.utils.PBKDF2Hasher;

import javax.ejb.EJB;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.Serializable;
import java.sql.SQLException;

@WebServlet("/EditAccountServlet")
public class EditAccountServlet extends HttpServlet {

    private Integer id = null;
    private String login = "";
    private String password1 = "";
    private String password2 = "";
    private String password3 = "";
    private String firstName = "";
    private String lastName = "";
    private String email = "";
    private String hashedPass = "";

    @EJB
    private UsersRepositoryDao usersRepository;

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

        id = Integer.parseInt(req.getParameter("userId"));
        login = req.getParameter("login");
        firstName = req.getParameter("firstName");
        lastName = req.getParameter("lastName");
        email = req.getParameter("e-mail");
        password1 = req.getParameter("password1");
        password2 = req.getParameter("password2");
        password3 = req.getParameter("password3");

        User user = null;

        try {
            user = usersRepository.getUserById(id);
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }

        req.getSession().setAttribute("userEdited", "userEdited");
        if (req.getSession().getAttribute("user") != null)
            resp.sendRedirect("loginSuccess.jsp");
        else
            resp.sendRedirect("index.jsp");

    }

/*
    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

        String userName = null;
        Cookie[] cookies = req.getCookies();
        if (cookies != null) {
            for (Cookie cookie : cookies) {
                if (cookie.getName().equals("userCookie")) userName = cookie.getValue();
            }
        }

        id = Integer.parseInt(req.getParameter("userId"));
        login = req.getParameter("login");
        firstName = req.getParameter("firstName");
        lastName = req.getParameter("lastName");
        email = req.getParameter("e-mail");
        password1 = req.getParameter("password1");
        password2 = req.getParameter("password2");
        password3 = req.getParameter("password3");

        User user = null;

        try {
            user = usersRepository.getUserById(id);
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }

//        emptyInputValidation(user);

  //      if(password3.equals(user.getPassword())) {
           // user.setEmail(email);
            user.setFirstName(firstName);
            user.setLastName(lastName);
           // user.setPassword(hashedPass);

            usersRepository.updateUserAfterEdit(user);

    //    }

//        User editedUser = new User(null, login, firstName, lastName, hashedPass, email, null, null);


   */
/*     try {
            UsersQuery.updateAccountQuery(userName, editedUser);
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
*//*

        req.getSession().setAttribute("userEdited", "userEdited");
        if (req.getSession().getAttribute("user") != null)
            resp.sendRedirect("loginSuccess.jsp");
        else
            resp.sendRedirect("index.jsp");
    }
*/

    private void emptyInputValidation(User user) {

        Hasher hasher = new PBKDF2Hasher();

//        User user = usersRepository.getUserById(userId);
    //    if (login.isEmpty()) login = user.getLogin();
        if (password1.isEmpty() || password2.isEmpty() && !password1.equals(password2)) hashedPass = user.getPassword();
        if (!password1.isEmpty() && password1.equals(password2)) hashedPass = hasher.hash(password2);
        if (!password3.isEmpty()) password3 = hasher.hash(password3);
        if (firstName.isEmpty()) firstName = user.getFirstName();
        if (lastName.isEmpty()) lastName = user.getLastName();
        if (email.isEmpty()) email = user.getEmail();
    }

}